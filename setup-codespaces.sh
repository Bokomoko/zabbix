#!/bin/bash

# üåê Script de Configura√ß√£o para GitHub Codespaces
# Automatiza port forwarding e configura√ß√£o inicial do Zabbix

echo "üè† Zabbix - Configura√ß√£o para GitHub Codespaces"
echo "==============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar se estamos em um Codespace
if [[ -n "$CODESPACES" ]]; then
    echo -e "${GREEN}‚úÖ GitHub Codespace detectado!${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è  Codespace: $CODESPACE_NAME${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Este script √© otimizado para GitHub Codespaces${NC}"
    echo -e "${YELLOW}   Mas voc√™ pode execut√°-lo em qualquer ambiente Linux${NC}"
fi

echo ""

# 1. Verificar pr√©-requisitos
echo "üîç Verificando pr√©-requisitos..."

if command_exists podman; then
    echo -e "${GREEN}‚úÖ Podman encontrado: $(podman --version)${NC}"
else
    echo -e "${RED}‚ùå Podman n√£o encontrado!${NC}"
    echo "   Instalando Podman..."
    sudo apt update && sudo apt install -y podman podman-compose
fi

if command_exists podman-compose; then
    echo -e "${GREEN}‚úÖ Podman Compose encontrado: $(podman-compose --version)${NC}"
else
    echo -e "${RED}‚ùå Podman Compose n√£o encontrado!${NC}"
    exit 1
fi

echo ""

# 2. Configurar arquivo .env se necess√°rio
echo "üìù Verificando arquivo .env..."

if [[ ! -f ".env" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .env n√£o encontrado!${NC}"
    if [[ -f ".env.example" ]]; then
        echo "   Criando .env a partir do .env.example..."
        cp .env.example .env
        echo -e "${GREEN}‚úÖ Arquivo .env criado!${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  IMPORTANTE: Edite o arquivo .env com suas configura√ß√µes!${NC}"
    else
        echo -e "${RED}‚ùå Arquivo .env.example tamb√©m n√£o encontrado!${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ Arquivo .env encontrado${NC}"
fi

echo ""

# 3. Verificar/criar diret√≥rio de certificados
echo "üîê Configurando certificados..."

if [[ ! -d "cert" ]]; then
    mkdir -p cert
    echo -e "${GREEN}‚úÖ Diret√≥rio cert/ criado${NC}"
fi

# Verificar se j√° existem certificados
if [[ ! -f "cert/zabbix.crt" ]] || [[ ! -f "cert/zabbix.key" ]]; then
    echo "   Gerando certificados SSL auto-assinados..."
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout cert/zabbix.key \
        -out cert/zabbix.crt \
        -subj "/C=BR/ST=Estado/L=Cidade/O=Zabbix-Home/CN=zabbix-codespace" \
        > /dev/null 2>&1
    
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ Certificados SSL gerados${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Erro ao gerar certificados SSL (n√£o cr√≠tico)${NC}"
    fi
else
    echo -e "${GREEN}‚úÖ Certificados SSL j√° existem${NC}"
fi

echo ""

# 4. Iniciar servi√ßos
echo "üöÄ Iniciando servi√ßos Zabbix..."

# Parar servi√ßos se estiverem rodando
podman-compose -f podman-compose.env.yml down > /dev/null 2>&1

# Iniciar servi√ßos
podman-compose -f podman-compose.env.yml up -d

if [[ $? -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ Servi√ßos iniciados com sucesso!${NC}"
else
    echo -e "${RED}‚ùå Erro ao iniciar servi√ßos${NC}"
    exit 1
fi

echo ""

# 5. Aguardar inicializa√ß√£o
echo "‚è≥ Aguardando inicializa√ß√£o dos servi√ßos..."

sleep 10

# Verificar status dos containers
echo "üîç Verificando status dos containers..."
podman-compose -f podman-compose.env.yml ps

echo ""

# 6. Configurar port forwarding (se estiver no Codespace)
if [[ -n "$CODESPACES" ]] && command_exists gh; then
    echo "üåê Configurando port forwarding..."
    
    # Verificar se as portas j√° est√£o sendo forwarded
    PORTS_STATUS=$(gh codespace ports 2>/dev/null)
    
    if echo "$PORTS_STATUS" | grep -q "8080"; then
        echo -e "${GREEN}‚úÖ Porta 8080 j√° est√° sendo forwarded${NC}"
    else
        echo "   Configurando port forwarding para porta 8080..."
        gh codespace ports forward 8080 > /dev/null 2>&1
    fi
    
    if echo "$PORTS_STATUS" | grep -q "10051"; then
        echo -e "${GREEN}‚úÖ Porta 10051 j√° est√° sendo forwarded${NC}"
    else
        echo "   Configurando port forwarding para porta 10051..."
        gh codespace ports forward 10051 > /dev/null 2>&1
    fi
    
    echo ""
    
    # Mostrar URLs de acesso
    echo "üîó URLs de acesso:"
    echo "=================="
    
    CODESPACE_URL=$(gh codespace ports | grep "8080" | awk '{print $3}' | head -1)
    ZABBIX_SERVER_URL=$(gh codespace ports | grep "10051" | awk '{print $3}' | head -1)
    
    if [[ -n "$CODESPACE_URL" ]]; then
        echo -e "${GREEN}üåê Interface Web:  $CODESPACE_URL${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  URL da interface web n√£o detectada automaticamente${NC}"
        echo "   Verifique a aba PORTS no VS Code"
    fi
    
    if [[ -n "$ZABBIX_SERVER_URL" ]]; then
        echo -e "${GREEN}üì° Zabbix Server: $ZABBIX_SERVER_URL${NC}"
        echo -e "${BLUE}‚ÑπÔ∏è  Use esta URL para configurar agentes externos${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  URL do Zabbix Server n√£o detectada automaticamente${NC}"
        echo "   Verifique a aba PORTS no VS Code"
    fi
    
else
    echo -e "${YELLOW}‚ö†Ô∏è  GitHub CLI n√£o encontrado ou n√£o est√° em Codespace${NC}"
    echo "   Configure port forwarding manualmente na aba PORTS do VS Code"
fi

echo ""

# 7. Informa√ß√µes de acesso
echo "üîë Informa√ß√µes de Acesso:"
echo "========================="
echo -e "${GREEN}Usu√°rio: Admin${NC}"
echo -e "${GREEN}Senha:   zabbix${NC}"
echo ""
echo -e "${RED}‚ö†Ô∏è  IMPORTANTE: Altere a senha padr√£o ap√≥s o primeiro login!${NC}"

echo ""

# 8. Pr√≥ximos passos
echo "üìã Pr√≥ximos Passos:"
echo "==================="
echo "1. üåê Acesse a interface web (URL acima)"
echo "2. üîê Fa√ßa login com Admin/zabbix"
echo "3. üîë Altere a senha padr√£o"
echo "4. üìä Explore os dashboards padr√£o"
echo "5. ‚ûï Adicione novos hosts para monitorar"

echo ""

# 9. Comandos √∫teis
echo "üõ†Ô∏è  Comandos √öteis:"
echo "==================="
echo "Ver logs:           podman-compose -f podman-compose.env.yml logs"
echo "Parar servi√ßos:     podman-compose -f podman-compose.env.yml down"
echo "Reiniciar:          podman-compose -f podman-compose.env.yml restart"
echo "Status:             podman-compose -f podman-compose.env.yml ps"

if [[ -n "$CODESPACES" ]]; then
    echo "Ver port forwards:  gh codespace ports"
    echo "Parar Codespace:    gh codespace stop"
fi

echo ""
echo -e "${GREEN}üéâ Configura√ß√£o conclu√≠da!${NC}"
echo -e "${BLUE}‚ÑπÔ∏è  Consulte README.md para mais informa√ß√µes${NC}"

# Aguardar um pouco para ver se a interface web est√° respondendo
echo ""
echo "üîç Testando conectividade da interface web..."
sleep 5

HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 2>/dev/null)

if [[ "$HTTP_STATUS" == "200" ]]; then
    echo -e "${GREEN}‚úÖ Interface web est√° respondendo!${NC}"
elif [[ "$HTTP_STATUS" == "302" ]]; then
    echo -e "${GREEN}‚úÖ Interface web est√° redirecionando (normal)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Interface web ainda n√£o est√° respondendo${NC}"
    echo "   Aguarde mais alguns minutos para inicializa√ß√£o completa"
fi
